generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Connection {
  id     String @id @default(uuid())
  fromId String
  toId   String @unique
  from   Output @relation(fields: [fromId], references: [id], onDelete: Cascade)
  to     Input  @relation(fields: [toId], references: [id], onDelete: Cascade)

  @@map("connections")
}

model NodePosition {
  nodeId String @unique
  x      Float
  y      Float
  node   Node   @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  @@map("node_positions")
}

model Node {
  id        String        @id @default(uuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  parentId  String?
  type      NodeType
  data      Json?
  name      String
  userId    String
  inputs    Input[]
  parent    Node?         @relation("node", fields: [parentId], references: [id], onDelete: Cascade)
  children  Node[]        @relation("node")
  position  NodePosition?
  outputs   Output[]

  @@map("nodes")
}

model Input {
  id         String      @id @default(uuid())
  nodeId     String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  value      Json?
  key        String
  connection Connection?
  node       Node?       @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  @@map("inputs")
}

model Output {
  id          String       @id @default(uuid())
  nodeId      String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  key         String
  connections Connection[]
  node        Node?        @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  @@map("outputs")
}

enum NodeType {
  ADDITION
  SUBTRACTION
  MULTIPLICATION
  DIVISION
  MODULO
  POWER
  SQUARE_ROOT
  ABSOLUTE
  SINE
  COSINE
  TANGENT
  ARCSINE
  ARCCOSINE
  ARCTANGENT
  LOGARITHM
  LOGARITHM2
  EXPONENTIAL
  PI
  EULER
  MIN
  MAX
  CEIL
  FLOOR
  ROUND
  RANDOM
  SIGN
  TRIAD_COLOR
  TETRADIC_COLOR
  ANALOGOUS_COLOR
  COMPLEMENTARY_COLOR
  SQUARE_COLOR
  TO_HSV
  FROM_HSV
  TO_HSL
  FROM_HSL
  TO_RGB
  FROM_RGB
  IMAGE
  WEBCAM
  IMAGE_VARIATION_AI
  PROMPT_AI
  CIRCUIT
  CIRCUIT_INPUTS
  CIRCUIT_OUTPUT
  TIMER
  CONSOLE
  LERP
  CUBIC_BEZIER
  MESH_3D
  GEOMETRY_3D
  RENDERER_3D
  OSCILLATOR
  IMAGE_EDIT_AI
  SYNTHESIZED_IMAGE
  VISION
}